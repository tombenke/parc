# https://taskfile.dev

version: 3

vars:
  GIT_HOOKS_DIR:
    sh: sh -c 'echo "$(pwd)/.git/hooks"'

env:

dotenv:
  - .local.env
  - .test.env

tasks:
  default:
    desc: Executes all the tests then build the binary.
    cmds:
      - task: format
      - task: lint
      - task: test
      - task: docs

  pre-commit:
    desc: Runs the QA tasks from a git pre-commit hook
    cmds:
      - task: lint
      - task: test

  clean:
    desc: Clean temporary files and folders
    cmds:
      - rm c.out

  install:
    desc: Install dependencies
    cmds:
      - sh -c "$(curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh)" -- -b $(go env GOPATH)/bin v1.54.1
      - go mod tidy
      - task: install-git-hooks

  install-git-hooks:
    desc: Install git hooks
    cmds:
      - echo -e "#!/bin/bash\ntask pre-commit" > {{.GIT_HOOKS_DIR}}/pre-commit
      - chmod ug+x {{.GIT_HOOKS_DIR}}/pre-commit

  format:
    desc: Autoformat the source files
    cmds:
      - gofmt -w .

  lint-display:
    desc: Call gofmt, go vet and go lint
    cmds:
      - go vet ./...
      - golangci-lint run

  lint:
    desc: Test gofmt, go vet and go lint
    cmds:
      - test -z $(gofmt -d .)
      - test -z $(go vet ./...)
      - golangci-lint run

  test:
    desc: Run all the go tests.
    cmds:
      - go test -count=1 ./...

  test-verbose:
    desc: Run all the go tests.
    cmds:
      - go test -v -count=1 ./...

  test-single:
    desc: Run all the go tests in verbose mode from a single test file.
    cmds:
      - task: format
      - go test -v -count=1  -run={{.CLI_ARGS}} ./...

  benchmark:
    desc: Run benchmark tests (INACCURATE, run directly from cli!)
    cmds:
      - go test -bench=.

  coverage:
    desc: Open test coverage in browser
    cmds:
      - go test -coverprofile=c.out -covermode=atomic ./...
      - go tool cover -html=c.out

  docs:
    desc: Generate the documentation
    cmds:

      # Generate the UML diagrams
      - echo "TODO"
